exception: Failure
exception: Success
exception: TestError

variable: test-number

: test-success  s" ." puts ;
: test-failure  s" \n*** test " %s  test-number @ %d  s"  failed\n" %s flush-output  1 exit ;
: test
	test-number inc-var
	= if Success raise else Failure raise endif
;

-- testing exception handling infrastructure
-- ...can tests fail?
: test-test  39  ;
' test-test    handles Failure
' test-failure handles Success
0 1 test    39 <> if TestError raise endif
-- ...and can they succeed
' test-failure handles Failure
' test-success handles Success
1 1 test  -- succeeds


-- constants and units
true                -1 test
false                0 test

1 CellBits shift-up   CellSize test
1 cell                CellSize test
1 cells               CellSize test


-- Logic
-1 bool             true test
 1 bool             true test
 0 bool            false test

 1  1 =             true test
-1  1 <>            true test
-1  0 <             true test
-1  0 >            false test
 4  0 >             true test
 1 17 >=           false test
17 17 >=            true test
 1  1 <=            true test

 10   5 15 btw?       true test
  4   5 15 btw?      false test
-10 -15 -1 btw?       true test
-10  -5  5 btw?      false test
  1 -10 10 btw?       true test

9  9 matches?      true test   9 test
7 -1 matches?     false test   7 test
ds-depth    0   test


-- Arithmetic
1  1 +       2 test
0  1 -      -1 test
1  0 -       1 test
1  1 *       1 test
99 1 *      99 test
10 2 *      20 test
 5 2 /mod    1 test   2 test
-5 2 /mod   -1 test  -2 test
5 2 /        2 test
 5 2 /modu   1 test   2 test

18 1+    19 test
18 1-    17 test
-1 2*    -2 test
-10 2*  -20 test
10 2*    20 test

 17 10 max   17 test
-17 10 max   10 test
 17 10 umax  17 test
-17 10 umax -17 test

 17 10 min   10 test
-17 10 min  -17 test
 17 10 umin  10 test
-17 10 umin  10 test


-- Stack shuffling
1 2  drop       1 test
1 2  swap drop  2 test
2 50 swap /    25 test
1 2  nip        2 test  ds-depth 0 test

99 push ds-depth                 0 test    pop        99 test 
rs-depth push rs-depth      pop 1+ test
rs-depth push rs-depth     peek 1+ test    pop  rs-depth test
rs-depth stash trash      rs-depth test

-- bitwise
 0  0 and     0 test
-1 -1 and    -1 test
-1  1 and     1 test

 0  0 or      0 test
-1  0 or     -1 test
-1 -1 or     -1 test
 0 -1 or     -1 test
 1  2 or      3 test

-1  0 xor    -1 test
-1 -1 xor     0 test
-1  1 xor    -2 test
 1 -1 xor    -2 test
 0  0 xor     0 test

 1 not       -2 test
 0 not       -1 test
-1 not        0 test

 1 2 shift-up  4 test
-1 2 shift-up -4 test
 5 1 shift-up  10 test
-5 1 shift-up -10 test

 4 2 shift-down   1 test
-4 2 shift-down  -1 test
 5 1 shift-down   2 test
-5 1 shift-down  -3 test


-- alignment
3 align   CellSize test
2 align   CellSize test
1 align   CellSize test
0 align          0 test


-- date and time
2015-01-08                             157869 test
00:00:00                                    0 test
00:01:00                                   60 test
01:00:00                                 3600 test
23:59:60                        SecondsInADay test
1970-01-01 00:00:00 to-unixtime             0 test 
2017-04-23 explode-date                    23 test  4 test  2017 test
2015-02-29 explode-date                     1 test  3 test  2015 test


-- decimals
1.0     100 test


-- chars
'7'                55 test
7 digit-to-char   '7' test
10 16 decompose   'a' test   0 test


-- control structure
0  5 times 1+ repeat          5 test
false if -17 else 10 endif   10 test
true  if -17 else 10 endif  -17 test
77    if -17 else 10 endif  -17 test


-- strings
s" hello world"          lens  11 test
s" this is cantilever\n" lens  19 test
s" embedded \"quotes\""  lens  17 test
s" embedded \0 null"     lens  15 test
s" blah" s" wiffle" s=      false test
s" blah" s" blah"   s=       true test
s" blah" s" blah\0" s=      false test

-- null-terminated strings
s" hello world"           s->z lenz  11 test
s" this is cantilever\n"  s->z lenz  19 test
s" embedded \"quotes\""   s->z lenz  17 test
s" embedded \0 null"      s->z lenz   9 test  -- ends at embedded \0

-- return functions

-- An inliner requires that endcol is always 
--    the terminator of a word's definition, 
--    and never occurs in the middle, which 
--    is why we have return as well.

: endcol-test return 0 -> ;; ;
: nop ;
--  0 |      2 | 2 |      3 |       4 |    5 |  6 | 7 |
-- xt | return | 0 | match? | zbranch | offs | ;; | ; |
' endcol-test  1 cell after @  ' return test
' endcol-test  6 cell after @  ' return test
' endcol-test  7 cell after @  ' endcol test

' push        wlen  -1 test
' nop         wlen   0 test
' endcol-test wlen   6 test

#inline  -- applies to nop
: inl-test 1 1 + ; #inline
: ifun1 inl-test ;
: ifun2 inl-test nop ;
: ifun3 3 inl-test nop 1 + + ;
: ifun4 if 2 else 7 endif ;

ifun1          2 test
ifun2          2 test
ifun3          6 test
true ifun4     2 test
false ifun4    7 test
#inline   -- applies to ifun4
true ifun4     2 test
false ifun4    7 test

: ifun5 ifun4 1+ ;
: ifun6 ' ifun4 call 1+ ;
true ifun5     3 test
false ifun5    8 test
true ifun6     3 test


-- Final test-harness sanity check
ds-depth    0   test ;

s"  ok\n" puts   0 exit ;


-- vim:ft=cantilever
